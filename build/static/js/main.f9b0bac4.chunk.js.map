{"version":3,"sources":["service/api.js","components/pageViewDrawer.jsx","pages/home.jsx","reportWebVitals.js","index.js"],"names":["axios","require","default","url","ax_get","a","path","u","get","data","ax_post","params","post","PageViewDrawer","pageView","useState","visible","setVisible","onClose","type","icon","LinkOutlined","onClick","placement","closable","width","src","height","frameBorder","style","marginTop","position","right","bottom","padding","background","textAlign","borderTop","Meta","Card","Home","product","setProduct","loading","setLoading","api","list","status","return","useEffect","getProductAll","title","borderBottom","margin","active","layout","gutter","maxWidth","xs","sm","md","lg","xl","Item","label","placeholder","onChange","e","name","target","value","size","message","destroy","Option","length","marginLeft","marginRight","paddingTop","hidden","map","ii","float","minHeight","cover","alt","img","window","open","extra","description","details","price","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f9b0bac4.chunk.js","sourcesContent":["/* eslint-disable */\r\nconst axios = require('axios').default\r\n\r\nconst url_1 = \"http://localhost:5011/xxyyzz\"\r\nconst url_2 = \"https://core.stupidarnob.com/xxyyzz\"\r\n\r\nconst url = url_2\r\n\r\nconst ax_get = async ({path}) => {\r\n    let u = url + \"\" + path\r\n    return await (await axios.get(u)).data\r\n}\r\n\r\n\r\n\r\nconst ax_post = async ({path, params}) => {\r\n    let u = url + \"\" + path\r\n    return await (await axios.post(u, params)).data\r\n}\r\n\r\n\r\nexport default {\r\n    ax_get,\r\n    ax_post\r\n}","/* eslint-disable */\r\nimport React, { useState } from 'react';\r\nimport { Drawer, Button } from 'antd';\r\nimport { LinkOutlined } from '@ant-design/icons'\r\n\r\nfunction PageViewDrawer({ pageView }) {\r\n\r\n    const [visible, setVisible] = useState(false);\r\n\r\n    const showDrawer = () => {\r\n        setVisible(true);\r\n    };\r\n    \r\n    const onClose = () => {\r\n        setVisible(false);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {/* <Button type=\"primary\" onClick={showDrawer}>\r\n                Open\r\n            </Button> */}\r\n            <Button\r\n                type=\"primary\"\r\n                icon={<LinkOutlined />}\r\n                onClick={showDrawer}\r\n            />\r\n            <Drawer\r\n                placement=\"right\"\r\n                closable\r\n                onClose={onClose}\r\n                visible={visible}\r\n                width={\"85%\"}\r\n            >\r\n                <iframe src={pageView} width=\"100%\" height=\"90%\" frameBorder=\"0\" style={{ marginTop: 40 }} />\r\n                <div\r\n                    style={{\r\n                        position: 'absolute',\r\n                        right: 0,\r\n                        bottom: 0,\r\n                        width: '100%',\r\n                        padding: '10px 16px',\r\n                        background: '#fff',\r\n                        textAlign: 'right',\r\n                        borderTop: '1px solid #ebebeb'\r\n                    }}\r\n                >\r\n                    <Button type=\"primary\" onClick={onClose}>Close</Button>\r\n                </div>\r\n            </Drawer>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default PageViewDrawer","/* eslint-disable */\r\nimport { Fragment, useEffect, useState } from 'react';\r\nimport { PageHeader, Row, Col, Card, Space, Input, Skeleton, Button, Result, Select, Form, message } from 'antd';\r\nimport api from '../service/api'\r\nimport PageViewDrawer from '../components/pageViewDrawer'\r\n\r\nconst { Meta } = Card;\r\n\r\nfunction Home() {\r\n\r\n    const [product, setProduct] = useState([])\r\n    const [loading, setLoading] = useState(true)\r\n\r\n    useEffect(() => {\r\n        getProductAll()\r\n    }, [])\r\n\r\n    async function getProductAll() {\r\n        setLoading(true)\r\n        setProduct([])\r\n        let list = await api.ax_get({ path: \"/list\" })\r\n        if (list.status) {\r\n            setProduct(list.return)\r\n        }\r\n        setLoading(false)\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <PageHeader\r\n                title=\"42-1\"\r\n                style={{ borderBottom: \"1px solid black\" }}\r\n            />\r\n\r\n            <Space />\r\n\r\n            <div style={{ margin: 20 }}>\r\n                <Skeleton active loading={loading} />\r\n            </div>\r\n\r\n            {\r\n                !loading &&\r\n                <>\r\n                    <center>\r\n                        <Form layout=\"vertical\" style={{ padding: 10 }}>\r\n                            <Row gutter={16} style={{ maxWidth: 1600 }}>\r\n                                <Col\r\n                                    xs={24} sm={24} md={12} lg={12} xl={12}\r\n                                >\r\n                                    <Form.Item label=\"Search\">\r\n                                        <Input\r\n                                            placeholder={\"Search Product Name\"}\r\n                                            style={{\r\n                                                width: \"100%\",\r\n                                            }}\r\n                                            onChange={async (e) => {\r\n                                                let list = await api.ax_post({\r\n                                                    path: \"/search\",\r\n                                                    params: {\r\n                                                        type: \"search\",\r\n                                                        name: e.target.value\r\n                                                    }\r\n                                                })\r\n                                                setProduct(list.return)\r\n                                            }}\r\n                                            size=\"large\"\r\n                                        />\r\n                                    </Form.Item>\r\n                                </Col>\r\n\r\n                                <Col\r\n                                    xs={24} sm={24} md={12} lg={12} xl={12}\r\n                                >\r\n                                    <Form.Item label=\"Product Type\">\r\n                                        <Select\r\n                                            size=\"large\"\r\n                                            placeholder=\"Select Product Type\"\r\n                                            style={{\r\n                                                width: \"100%\",\r\n                                            }}\r\n                                            onChange={async (e) => {\r\n                                                message.destroy()\r\n                                                message.loading(\"Please wait...\", 0)\r\n                                                setProduct([])\r\n                                                setLoading(true)\r\n                                                let list = await api.ax_post({\r\n                                                    path: \"/search\",\r\n                                                    params: {\r\n                                                        type: \"product\",\r\n                                                        name: e\r\n                                                    }\r\n                                                })\r\n                                                message.destroy()\r\n                                                message.destroy()\r\n                                                setProduct(list.return)\r\n                                                setLoading(false)\r\n                                            }}\r\n                                        >\r\n                                            <Select.Option key=\"1\" value=\"headphone\">Headphone</Select.Option>\r\n                                            <Select.Option key=\"2\" value=\"keyboards\">Keyboards</Select.Option>\r\n                                            <Select.Option key=\"3\" value=\"micro-sd-card\">Micro/SD card</Select.Option>\r\n                                            <Select.Option key=\"4\" value=\"microphone\">Microphone</Select.Option>\r\n                                        </Select>\r\n                                    </Form.Item>\r\n                                </Col>\r\n                            </Row>\r\n                        </Form>\r\n                    </center>\r\n\r\n                    {\r\n                        product.length === 0 &&\r\n                        <Result\r\n                            status=\"warning\"\r\n                            title=\"No Product Found\"\r\n                        />\r\n                    }\r\n\r\n                    <center>\r\n                        <Row\r\n                            gutter={24}\r\n                            style={{\r\n                                marginLeft: 0,\r\n                                marginRight: 0,\r\n                                paddingTop: 10,\r\n                                maxWidth: 1600\r\n                            }}\r\n                            hidden={product.length === 0 ? true : false}\r\n                        >\r\n                            {\r\n                                product.map(ii =>\r\n                                    <Col\r\n                                        xs={24} sm={12} md={12} lg={8} xl={4}\r\n                                        style={{ paddingTop: 10 }}\r\n                                    >\r\n                                        <Card\r\n                                            title={<img src={\"https://www.startech.com.bd/image/catalog/logo.png\"} style={{ height: 40, width: 70, float: \"left\" }} />}\r\n                                            style={{ minHeight: 550, marginTop: 20 }}\r\n                                            cover={\r\n                                                <img \r\n                                                    style={{ padding: 8, width: 180, height: 180 }} \r\n                                                    alt={ii.name} \r\n                                                    src={ii.img} \r\n                                                    onClick={() => window.open(ii.url, \"_blank\")}\r\n                                                />\r\n                                            }\r\n                                            extra={[\r\n                                                <PageViewDrawer pageView={ii.url}/>\r\n                                            ]}\r\n                                        >\r\n\r\n                                            <b>{ii.name}</b>\r\n                                            <Meta style={{ marginTop: 5 }} description={ii.details} />\r\n\r\n                                            <div\r\n                                                style={{\r\n                                                    position: 'absolute',\r\n                                                    right: 0,\r\n                                                    bottom: 0,\r\n                                                    width: '100%',\r\n                                                    padding: '10px 16px',\r\n                                                    background: '#cdcdcd',\r\n                                                    textAlign: 'right',\r\n                                                    borderTop: '1px solid black'\r\n                                                }}\r\n                                            >\r\n                                                <h3>\r\n                                                    <b>Price: {ii.price}</b>\r\n                                                </h3>\r\n                                            </div>\r\n                                        </Card>\r\n                                    </Col>\r\n                                )\r\n                            }\r\n                        </Row>\r\n                    </center>\r\n                </>\r\n            }\r\n\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default Home;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'antd/dist/antd.css';\r\nimport Home from './pages/home';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Home />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}